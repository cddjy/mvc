package java8.base;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * 方法引用
 * 
 * @author jianyi
 *
 */
public class MethodReference<T,A,R> {

	MethodReference() {

	}

	public static void main(String[] args) {
		MethodReference mr = new MethodReference();
		mr.testMethodReference();
	}

	public void testMethodReference() {
		int a = 1;
		int b = 2;
		MethodReference.handleStatic(a, b);

		/**
		 * 引用静态方法
		 */
		HandleFunctionalInterface f = MethodReference::handleStatic;
		int r = f.handle(a, b);
		System.out.println("handleStatic:" + r);

		/**
		 * 引用对象方法
		 */
		MethodReference m = new MethodReference();
		HandleFunctionalInterface f2 = m::handleObject;
		int r1 = f2.handle(a, b);
		System.out.println("handleObject:" + r1);

		/**
		 * BiFunction:两个入参，一个返回
		 */
		BiFunction<Integer, Integer, Integer> biFunction = (arg1, arg2) -> arg1
				* arg2;
		Integer r2 = biFunction.apply(a, b);
		System.out.println("biFunction:" + r2);

		HandleFunctionalInterface f3 = RoleType::sub;

		/**
		 * 引用构造
		 */
		/**
		 * Supplier:不接受参数，返回一个结果
		 */
		Supplier<MethodReference> supplier =  ()->new MethodReference();
		MethodReference  mr = supplier.get();
		Supplier<MethodReference> supplier2 =  MethodReference::new;
		MethodReference  mr2 = supplier.get();
		System.out.println("()->new MethodReference():"+mr);
		System.out.println("MethodReference::new:"+mr2);
		
		
		/**
		 * BiConsumer:接受两个参数，不返回结果
		 */
/*		BiConsumer<Integer,String> listAdd = List::add;
		Supplier<List<String>> supplier2 =  ArrayList::new;
		MethodReference  list = supplier.get();
//		List<String>  list =


		List<String> list = new ArrayList<String>();
        list.stream().filter(baseReportBean -> baseReportBean != null)
                        .collect(Collectors.toList());

	}
	*/
	
	/**
	 * Collectors.toList()
	 */
	publ/*ic  void dd(){
		new MethodReference();
		 new MethodReference<ArrayList,Integer,String>(ArrayList::new, List::add);
	}
	
	MethodReference(Supplier<A> supplier,
            BiConsumer<A, T> accumulator){
		
	}

	public static int handleStatic(int a, int b) {
		return a * b;
	}

	public int handleObject(int a, int b) {
		return a * b;
	}*/

}
